name: Article microservic CI/CD

on:
  push:
    branches:
      - 'master'
    paths:
      - 'article/**'

env:
  IMAGE: article_service
  HOSTNAME: eu.gcr.io
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: europe-west1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name


jobs:
  compile:
    runs-on: ubuntu-latest
    name: Running Java ${{ matrix.java }} compile
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Compile code
        working-directory: ./article
        run: mvn compile

  code_quality:
    name: SonarCloud code qualitity check
    runs-on: ubuntu-latest
    steps:
      - uses: getong/mariadb-action@v1.1
        with:
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql database: 'article'
          mysql root password: ${{ secrets.ROOTPASSWORD }}
          mysql user: 'root'
          mysql password: ${{ secrets.DATABASEPASSWORD }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        working-directory: ./article
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_ARTICLE }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  test:
    runs-on: ubuntu-latest
    name: Test & Package
    needs: compile

    steps:
      - uses: getong/mariadb-action@v1.1
        with:
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql database: 'article'
          mysql root password: ${{ secrets.ROOTPASSWORD }}
          mysql user: 'root'
          mysql password: ${{ secrets.DATABASEPASSWORD }}
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
          settings-path: ".m2/"
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
      - name: Maven Test
        working-directory: ./article
        run: mvn -B clean test
      - name: Maven Package
        working-directory: ./article
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        working-directory: ./article
        run: mvn -B clean verify -Pintegration-test

#  artifact:
#    name: Publish - GitHub Packages
#    runs-on: ubuntu-latest
#    needs: [test, code_quality]
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.11
#          settings-path: ".m2/"
#      - uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
#      - uses: s4u/maven-settings-action@v2.4.0
#        with:
#          servers: |
#            [{
#                "id": "github",
#                "configuration": {
#                  "httpHeaders": {
#                    "property": {
#                      "name": "Authorization",
#                      "value": "Bearer ${{ secrets.GITHUB_ACTOR }}"
#                    }
#                  }
#                }
#            }]
#
#      - name: Publish artifact on GitHub Packages
#        working-directory: ./article
#        run: mvn -B clean deploy -DskipTests
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
#      - name: Copying target jar
#        run: |
#          mkdir myTarget
#          cp target/*.jar myTarget
#      - name: 'Upload Artifact'
#        uses: actions/upload-artifact@v2
#        with:
#          name: article-service
#          path: myTarget
#          retention-days: 5


  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-latest
    needs: [test, code_quality]
    env:
      REPO: ${{ secrets.DOCKER_REPO_ARTICLE }}

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Login to Docker Hub
        working-directory: ./article
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
      - name: Build Docker image
        working-directory: ./article
        run: DOCKER_BUILDKIT=1 docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        working-directory: ./article
        run: docker push $REPO

  google-cloud-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build
        working-directory: ./article
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide